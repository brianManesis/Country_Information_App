{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataPathToPrefixedClassNames = dataPathToPrefixedClassNames;\nexports.extendDataPath = extendDataPath;\nexports.jsonDataPropType = exports.jsonDataPathPropType = exports.jsonDataOptsPropType = void 0;\nexports.jsonDataToMd5Sum = jsonDataToMd5Sum;\nexports.jsonDataType = jsonDataType;\nvar _md = _interopRequireDefault(require(\"crypto-js/md5\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Return a string describing the data type.\n *\n * Returns 'object', 'array', 'string', 'number', 'boolean', 'null', 'undefined'\n * at least.\n *\n * @param {any} data Any data/value.\n * @returns {string} A word describing the type.\n */\nfunction jsonDataType(data) {\n  return {}.toString.call(data).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\n/**\n * A React prop type validator factory for the JSON data property.\n *\n * The resultant validator accepts any JSON serialisable type. Specify\n * isRequired as true to generate a required property validator or false\n * to generate an optional property validator.\n *\n * @param {boolean} isRequired Is prop required?\n * @returns {Function} A React property validator function.\n */\n\nfunction jsonDataPropTypeFactory(isRequired) {\n  return function jsonDataPropType(props, propName) {\n    const propVal = props[propName];\n    if (propVal === undefined) {\n      if (isRequired) {\n        throw new Error(\"\".concat(propName, \" is required\"));\n      }\n    } else {\n      const propType = jsonDataType(propVal);\n      if (!['object', 'array', 'string', 'number', 'boolean', 'null'].includes(propType)) {\n        return new Error(\"\".concat(propName, \" must be a JSON serialisable type (\").concat(propType, \" is not valid)\"));\n      }\n    }\n    return undefined;\n  };\n}\n/**\n * A React prop type validator for the JSON data path used by the React components.\n */\n\nconst jsonDataPropType = jsonDataPropTypeFactory(false);\nexports.jsonDataPropType = jsonDataPropType;\njsonDataPropType.isRequired = jsonDataPropTypeFactory(true);\n/**\n * A React prop type validator for the JSON data path used by the React components.\n */\n\nconst jsonDataPathPropType = _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]));\n/**\n * A React prop type validator for the JSON data options used by the React components.\n */\n\nexports.jsonDataPathPropType = jsonDataPathPropType;\nconst jsonDataOptsPropType = _propTypes.default.shape({\n  array_path_classes: _propTypes.default.string,\n  true_text: _propTypes.default.node,\n  false_text: _propTypes.default.node,\n  null_text: _propTypes.default.node\n});\n/**\n * Return a hash for a JSON serialisable structure.\n *\n * @param {any} data Any data/value.\n * @returns {string} MD5 sum as a string.\n */\n\nexports.jsonDataOptsPropType = jsonDataOptsPropType;\nfunction jsonDataToMd5Sum(data) {\n  let extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const hashableData = JSON.stringify(data);\n  const dataPrefix = extra === undefined ? \"\".concat(jsonDataType(data), \" \") : \"\".concat(jsonDataType(data), \" \").concat(extra, \" \");\n  return (0, _md.default)(dataPrefix + hashableData).toString();\n}\n/**\n * Return a array of prefixed CSS class name for the given (array of strings) path.\n *\n * By default numbered and unnumbered classes will be generated for array indexes. An example of\n * a numbered index class would be \"prefix-aaa-3-20-d\", where as an unnumbered index class would\n * be \"prefix-aaa-3-20-d\". Setting the optional \"arrays\" parameter to \"numbered\" or \"unnumbered\"\n * will restrict classes to just one or the other.\n *\n * @param {Array} path Array of strings and numbers, as used/generated/maintained by the JSON react components.\n * @param {string} prefix The prefix to apply to all classes.\n * @param {string} arrays Optionally set to \"numbered\" or \"unnumbered\", see above.\n * @returns {Array} Array of prefixed class names to apply to the component rendering the class.\n */\n\nfunction dataPathToPrefixedClassNames(path, prefix) {\n  let arrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'numbered_and_unnumbered';\n  let classNames = [prefix];\n  for (const pe of path) {\n    // eslint-disable-line no-restricted-syntax\n    const newClassNames = [];\n    for (const cn of classNames) {\n      // eslint-disable-line no-restricted-syntax\n      if (typeof pe === 'number') {\n        if (arrays !== 'numbered') {\n          newClassNames.push(\"\".concat(cn, \"-n\"));\n        }\n        if (arrays !== 'unnumbered') {\n          newClassNames.push(\"\".concat(cn, \"-\").concat(pe));\n        }\n      } else {\n        newClassNames.push(\"\".concat(cn, \"-\").concat(pe));\n      }\n    }\n    classNames = newClassNames;\n  }\n  return classNames;\n}\n/**\n * Given a path, return an extended path.\n *\n * if the given path is null, then null is returned.\n *\n * @param {Array} path Array of strings, as used/generated/maintained by the JSON react components.\n * @param {(string|number)} pathExt extension, may be a string or number.\n * @returns {string} A new path, extended to include the new path element.\n */\n\nfunction extendDataPath(path, pathExt) {\n  return path.concat(pathExt);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","dataPathToPrefixedClassNames","extendDataPath","jsonDataPropType","jsonDataPathPropType","jsonDataOptsPropType","jsonDataToMd5Sum","jsonDataType","_md","_interopRequireDefault","require","_propTypes","obj","__esModule","default","data","toString","call","match","toLowerCase","jsonDataPropTypeFactory","isRequired","props","propName","propVal","undefined","Error","concat","propType","includes","arrayOf","oneOfType","string","number","shape","array_path_classes","true_text","node","false_text","null_text","extra","arguments","length","hashableData","JSON","stringify","dataPrefix","path","prefix","arrays","classNames","pe","newClassNames","cn","push","pathExt"],"sources":["/home/brian/Desktop/Projects/coding-challenge-submission/frontend/node_modules/react-json-object/dist/dataUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dataPathToPrefixedClassNames = dataPathToPrefixedClassNames;\nexports.extendDataPath = extendDataPath;\nexports.jsonDataPropType = exports.jsonDataPathPropType = exports.jsonDataOptsPropType = void 0;\nexports.jsonDataToMd5Sum = jsonDataToMd5Sum;\nexports.jsonDataType = jsonDataType;\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.json.stringify.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nvar _md = _interopRequireDefault(require(\"crypto-js/md5\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Return a string describing the data type.\n *\n * Returns 'object', 'array', 'string', 'number', 'boolean', 'null', 'undefined'\n * at least.\n *\n * @param {any} data Any data/value.\n * @returns {string} A word describing the type.\n */\nfunction jsonDataType(data) {\n  return {}.toString.call(data).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\n/**\n * A React prop type validator factory for the JSON data property.\n *\n * The resultant validator accepts any JSON serialisable type. Specify\n * isRequired as true to generate a required property validator or false\n * to generate an optional property validator.\n *\n * @param {boolean} isRequired Is prop required?\n * @returns {Function} A React property validator function.\n */\n\n\nfunction jsonDataPropTypeFactory(isRequired) {\n  return function jsonDataPropType(props, propName) {\n    const propVal = props[propName];\n\n    if (propVal === undefined) {\n      if (isRequired) {\n        throw new Error(\"\".concat(propName, \" is required\"));\n      }\n    } else {\n      const propType = jsonDataType(propVal);\n\n      if (!['object', 'array', 'string', 'number', 'boolean', 'null'].includes(propType)) {\n        return new Error(\"\".concat(propName, \" must be a JSON serialisable type (\").concat(propType, \" is not valid)\"));\n      }\n    }\n\n    return undefined;\n  };\n}\n/**\n * A React prop type validator for the JSON data path used by the React components.\n */\n\n\nconst jsonDataPropType = jsonDataPropTypeFactory(false);\nexports.jsonDataPropType = jsonDataPropType;\njsonDataPropType.isRequired = jsonDataPropTypeFactory(true);\n/**\n * A React prop type validator for the JSON data path used by the React components.\n */\n\nconst jsonDataPathPropType = _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]));\n/**\n * A React prop type validator for the JSON data options used by the React components.\n */\n\n\nexports.jsonDataPathPropType = jsonDataPathPropType;\n\nconst jsonDataOptsPropType = _propTypes.default.shape({\n  array_path_classes: _propTypes.default.string,\n  true_text: _propTypes.default.node,\n  false_text: _propTypes.default.node,\n  null_text: _propTypes.default.node\n});\n/**\n * Return a hash for a JSON serialisable structure.\n *\n * @param {any} data Any data/value.\n * @returns {string} MD5 sum as a string.\n */\n\n\nexports.jsonDataOptsPropType = jsonDataOptsPropType;\n\nfunction jsonDataToMd5Sum(data) {\n  let extra = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  const hashableData = JSON.stringify(data);\n  const dataPrefix = extra === undefined ? \"\".concat(jsonDataType(data), \" \") : \"\".concat(jsonDataType(data), \" \").concat(extra, \" \");\n  return (0, _md.default)(dataPrefix + hashableData).toString();\n}\n/**\n * Return a array of prefixed CSS class name for the given (array of strings) path.\n *\n * By default numbered and unnumbered classes will be generated for array indexes. An example of\n * a numbered index class would be \"prefix-aaa-3-20-d\", where as an unnumbered index class would\n * be \"prefix-aaa-3-20-d\". Setting the optional \"arrays\" parameter to \"numbered\" or \"unnumbered\"\n * will restrict classes to just one or the other.\n *\n * @param {Array} path Array of strings and numbers, as used/generated/maintained by the JSON react components.\n * @param {string} prefix The prefix to apply to all classes.\n * @param {string} arrays Optionally set to \"numbered\" or \"unnumbered\", see above.\n * @returns {Array} Array of prefixed class names to apply to the component rendering the class.\n */\n\n\nfunction dataPathToPrefixedClassNames(path, prefix) {\n  let arrays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'numbered_and_unnumbered';\n  let classNames = [prefix];\n\n  for (const pe of path) {\n    // eslint-disable-line no-restricted-syntax\n    const newClassNames = [];\n\n    for (const cn of classNames) {\n      // eslint-disable-line no-restricted-syntax\n      if (typeof pe === 'number') {\n        if (arrays !== 'numbered') {\n          newClassNames.push(\"\".concat(cn, \"-n\"));\n        }\n\n        if (arrays !== 'unnumbered') {\n          newClassNames.push(\"\".concat(cn, \"-\").concat(pe));\n        }\n      } else {\n        newClassNames.push(\"\".concat(cn, \"-\").concat(pe));\n      }\n    }\n\n    classNames = newClassNames;\n  }\n\n  return classNames;\n}\n/**\n * Given a path, return an extended path.\n *\n * if the given path is null, then null is returned.\n *\n * @param {Array} path Array of strings, as used/generated/maintained by the JSON react components.\n * @param {(string|number)} pathExt extension, may be a string or number.\n * @returns {string} A new path, extended to include the new path element.\n */\n\n\nfunction extendDataPath(path, pathExt) {\n  return path.concat(pathExt);\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,4BAA4B,GAAGA,4BAA4B;AACnEF,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvCH,OAAO,CAACI,gBAAgB,GAAGJ,OAAO,CAACK,oBAAoB,GAAGL,OAAO,CAACM,oBAAoB,GAAG,KAAK,CAAC;AAC/FN,OAAO,CAACO,gBAAgB,GAAGA,gBAAgB;AAC3CP,OAAO,CAACQ,YAAY,GAAGA,YAAY;AAcnC,IAAIC,GAAG,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;AAE1D,IAAIC,UAAU,GAAGF,sBAAsB,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;AAE9D,SAASD,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,YAAYA,CAACQ,IAAI,EAAE;EAC1B,OAAO,CAAC,CAAC,CAACC,QAAQ,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,uBAAuBA,CAACC,UAAU,EAAE;EAC3C,OAAO,SAASlB,gBAAgBA,CAACmB,KAAK,EAAEC,QAAQ,EAAE;IAChD,MAAMC,OAAO,GAAGF,KAAK,CAACC,QAAQ,CAAC;IAE/B,IAAIC,OAAO,KAAKC,SAAS,EAAE;MACzB,IAAIJ,UAAU,EAAE;QACd,MAAM,IAAIK,KAAK,CAAC,EAAE,CAACC,MAAM,CAACJ,QAAQ,EAAE,cAAc,CAAC,CAAC;MACtD;IACF,CAAC,MAAM;MACL,MAAMK,QAAQ,GAAGrB,YAAY,CAACiB,OAAO,CAAC;MAEtC,IAAI,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAACK,QAAQ,CAACD,QAAQ,CAAC,EAAE;QAClF,OAAO,IAAIF,KAAK,CAAC,EAAE,CAACC,MAAM,CAACJ,QAAQ,EAAE,qCAAqC,CAAC,CAACI,MAAM,CAACC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;MACjH;IACF;IAEA,OAAOH,SAAS;EAClB,CAAC;AACH;AACA;AACA;AACA;;AAGA,MAAMtB,gBAAgB,GAAGiB,uBAAuB,CAAC,KAAK,CAAC;AACvDrB,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3CA,gBAAgB,CAACkB,UAAU,GAAGD,uBAAuB,CAAC,IAAI,CAAC;AAC3D;AACA;AACA;;AAEA,MAAMhB,oBAAoB,GAAGO,UAAU,CAACG,OAAO,CAACgB,OAAO,CAACnB,UAAU,CAACG,OAAO,CAACiB,SAAS,CAAC,CAACpB,UAAU,CAACG,OAAO,CAACkB,MAAM,EAAErB,UAAU,CAACG,OAAO,CAACmB,MAAM,CAAC,CAAC,CAAC;AAC7I;AACA;AACA;;AAGAlC,OAAO,CAACK,oBAAoB,GAAGA,oBAAoB;AAEnD,MAAMC,oBAAoB,GAAGM,UAAU,CAACG,OAAO,CAACoB,KAAK,CAAC;EACpDC,kBAAkB,EAAExB,UAAU,CAACG,OAAO,CAACkB,MAAM;EAC7CI,SAAS,EAAEzB,UAAU,CAACG,OAAO,CAACuB,IAAI;EAClCC,UAAU,EAAE3B,UAAU,CAACG,OAAO,CAACuB,IAAI;EACnCE,SAAS,EAAE5B,UAAU,CAACG,OAAO,CAACuB;AAChC,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;;AAGAtC,OAAO,CAACM,oBAAoB,GAAGA,oBAAoB;AAEnD,SAASC,gBAAgBA,CAACS,IAAI,EAAE;EAC9B,IAAIyB,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKhB,SAAS,GAAGgB,SAAS,CAAC,CAAC,CAAC,GAAGhB,SAAS;EACzF,MAAMkB,YAAY,GAAGC,IAAI,CAACC,SAAS,CAAC9B,IAAI,CAAC;EACzC,MAAM+B,UAAU,GAAGN,KAAK,KAAKf,SAAS,GAAG,EAAE,CAACE,MAAM,CAACpB,YAAY,CAACQ,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAACY,MAAM,CAACpB,YAAY,CAACQ,IAAI,CAAC,EAAE,GAAG,CAAC,CAACY,MAAM,CAACa,KAAK,EAAE,GAAG,CAAC;EACnI,OAAO,CAAC,CAAC,EAAEhC,GAAG,CAACM,OAAO,EAAEgC,UAAU,GAAGH,YAAY,CAAC,CAAC3B,QAAQ,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASf,4BAA4BA,CAAC8C,IAAI,EAAEC,MAAM,EAAE;EAClD,IAAIC,MAAM,GAAGR,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKhB,SAAS,GAAGgB,SAAS,CAAC,CAAC,CAAC,GAAG,yBAAyB;EAC1G,IAAIS,UAAU,GAAG,CAACF,MAAM,CAAC;EAEzB,KAAK,MAAMG,EAAE,IAAIJ,IAAI,EAAE;IACrB;IACA,MAAMK,aAAa,GAAG,EAAE;IAExB,KAAK,MAAMC,EAAE,IAAIH,UAAU,EAAE;MAC3B;MACA,IAAI,OAAOC,EAAE,KAAK,QAAQ,EAAE;QAC1B,IAAIF,MAAM,KAAK,UAAU,EAAE;UACzBG,aAAa,CAACE,IAAI,CAAC,EAAE,CAAC3B,MAAM,CAAC0B,EAAE,EAAE,IAAI,CAAC,CAAC;QACzC;QAEA,IAAIJ,MAAM,KAAK,YAAY,EAAE;UAC3BG,aAAa,CAACE,IAAI,CAAC,EAAE,CAAC3B,MAAM,CAAC0B,EAAE,EAAE,GAAG,CAAC,CAAC1B,MAAM,CAACwB,EAAE,CAAC,CAAC;QACnD;MACF,CAAC,MAAM;QACLC,aAAa,CAACE,IAAI,CAAC,EAAE,CAAC3B,MAAM,CAAC0B,EAAE,EAAE,GAAG,CAAC,CAAC1B,MAAM,CAACwB,EAAE,CAAC,CAAC;MACnD;IACF;IAEAD,UAAU,GAAGE,aAAa;EAC5B;EAEA,OAAOF,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAShD,cAAcA,CAAC6C,IAAI,EAAEQ,OAAO,EAAE;EACrC,OAAOR,IAAI,CAACpB,MAAM,CAAC4B,OAAO,CAAC;AAC7B"},"metadata":{},"sourceType":"script","externalDependencies":[]}